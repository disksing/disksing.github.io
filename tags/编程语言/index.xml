<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言 on 硬盘在歌唱</title><link>http://disksing.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>Recent content in 编程语言 on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 11 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Go语言泛型初体验</title><link>http://disksing.com/try-go-generics/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>http://disksing.com/try-go-generics/</guid><description>Go1.18rc1 放出来也有一段时间了，我们期待了多年了泛型的支持终于是要实装了，毕竟已经是RC，后面语法应该不会再大动了，所以决定提前来学习一下。 前几年曾</description></item><item><title>五句话理解 Rust 所有权</title><link>http://disksing.com/understanding-rust-ownership/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/understanding-rust-ownership/</guid><description>先免责声明一下哈，我是 Rust 新手入门，也没研究过 Rust 编译器。本文只是我自己学习 Rust 所有权时的一些思路，或者说对相关概念的一种解释吧，仅供参考，有谬误</description></item><item><title>Go 语言设计模式：单例</title><link>http://disksing.com/go-singleton/</link><pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate><guid>http://disksing.com/go-singleton/</guid><description>老实说，我觉得单例是 23 种设计模式里最没意思的了，甚至都算不上是个模式。但因为 Go 语言有些特立独行的 package 设计，导致 Go 语言中的单例写起来跟其它语言不</description></item><item><title>十个 C++ 隐藏特性</title><link>http://disksing.com/cpp-hidden-features/</link><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid>http://disksing.com/cpp-hidden-features/</guid><description>1. []运算符的真相 因为a[8]是*(a+8)的同义表达，*(a+8)又等于*(8+a)，所以a[8]可以写成……8[a]。 int a[3] = {0}; 2[a] = 1; 2[a][a] =</description></item><item><title>Go 语言设计模式：组合</title><link>http://disksing.com/go-composite/</link><pubDate>Mon, 17 Nov 2014 00:00:00 +0000</pubDate><guid>http://disksing.com/go-composite/</guid><description>GoF 对组合模式的定义是，将对象组合成树形结构以表示“部分整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。 对于这句话我是</description></item><item><title>Go 语言设计模式：迭代器</title><link>http://disksing.com/go-iterator/</link><pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate><guid>http://disksing.com/go-iterator/</guid><description>关于 “Go 语言设计模式” 系列 这个系列首先是关于 Go 语言实践的。在项目中实际使用 Go 语言也有段时间了，一个体会就是不论是官方文档、图书还是网络资料</description></item></channel></rss>