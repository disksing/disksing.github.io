<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App Script on 硬盘在歌唱</title><link>http://disksing.com/tags/app-script/</link><description>Recent content in App Script on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/app-script/index.xml" rel="self" type="application/rss+xml"/><item><title>自动给 Gmail 中 GitHub 的邮件打标签</title><link>http://disksing.com/tag-github-gmail/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tag-github-gmail/</guid><description>相信不少人跟我一样，平时是把 Gmail 直接当成 TODO List 来用的。处理 GitHub Issue 或 PR 时也是基于 Gmail 来完成。根据 PR 和 Issue 的不同状态，给邮件打上对应的标签，是为了能在不点开邮件 thread 的情况下就能评估优先级和快速进行一些处理，效果如下：
那么这个是怎么做的呢？我们知道 Gmail 有过滤器的功能可以自动加标签，可惜的是过滤器不支持正则表达式什么的，在 GitHub 邮件这个场景下很容易误判。最后的方法还是祭出了 Google App Script 大法，代码如下：
用法是创建一个 Google App Script 项目，把代码贴进去，然后部署为网络应用并授权，最后再加上触发器定时运行就搞定了。注意触发器别设得太频繁了，15 分钟运行一次就差不多了，太频繁可能会超出配额。具体操作流程可以参考下追踪 GitHub PR review 记录一文。</description></item><item><title>追踪 GitHub PR review 记录</title><link>http://disksing.com/review-recorder/</link><pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate><guid>http://disksing.com/review-recorder/</guid><description>为啥要搞这个 最近公司项目组推行了一个规定：周报里面要把 Review 过的 PR 填上。作为有尊严的程序员，我们肯定是想自动化地来做。可惜试了下 GitHub 的 API 之后发现有几个蛋疼的问题，主要是如果 review 完了没有 comment 直接 approve 的话查不到记录（其实能，但是会很麻烦）。
于是我就想搞个 chrome 插件来统计，有个额外的 bonus 是可以（粗略）统计 review 每个 PR 花的时间，当然了最主要的原因是我没写过 chrome 插件，想玩一玩。
另外一个问题是，我会用多个电脑工作，很自然地需要一个服务器来同步数据，也为了好玩点，我决定把数据给存在 Google Spreadsheet 上。
怎么做的 先说一下 chrome 插件部分，大体上就是判断是 Pull Request 页面后触发一个定时器，每分钟检查一下，如果在 review 就把相关信息 POST 到服务端记条日志。判断在 review 的标准是一分钟内在 /pull/xxx/files 页面有过点击鼠标，或者按键，或者 scroll 操作。另外点击插件 icon 的时候打开一个新 tab 查询 review 统计信息，默认查最近一周的记录（包含当天）。
Spreadsheet 这边就是一空白的表格加两段 Google App Script。doPost 负责接收 review 记录，记在表格里。doGet 负责汇总一段时间内的记录。
手把手安装教程 这个步骤略麻烦，坦率地讲并不是真推荐给你用，更多地是展示一下怎么把 chrome extension + app script + spread sheet 这套前端+后端+数据库的技术栈给跑起来。</description></item></channel></rss>