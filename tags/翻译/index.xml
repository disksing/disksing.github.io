<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>翻译 on 硬盘在歌唱</title><link>http://disksing.com/tags/%E7%BF%BB%E8%AF%91/</link><description>Recent content in 翻译 on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Apr 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml"/><item><title>全面使用 UTF-8</title><link>http://disksing.com/utf8everywhere/</link><pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate><guid>http://disksing.com/utf8everywhere/</guid><description/></item><item><title>GNU make 自动依赖生成</title><link>http://disksing.com/make-auto-dep/</link><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid>http://disksing.com/make-auto-dep/</guid><description>原文：Auto-Dependency Generation
作者：Paul D.Smith &amp;lt;psmith@gnu.org&amp;gt;
在基于 make 的编译环境中，正确列出 makefile文 件中所有的依赖项，是一个特别重要，却又时常令人沮丧的任务。
本文档将给出一种能让 make 自动生成并维护依赖的有效方法。
这个方法的发明人是 Tom Tromey &amp;lt;tromey@cygnus.com&amp;gt;，我仅在这里提一次。方法的所有权归他；解释不妥之处都由我（Paul D.Smith）负责。
传统的 make depend 方法 使用 GNU make 的 include 简单自动依赖生成 高级自动依赖生成 避免重复执行 make 避免 No rule to make target … 错误 放置输出文件 定义 MAKEDEPEND MAKEDEPEND = /usr/lib/cpp MAKEDEPEND = makedepend MAKEDEPEND = gcc -M 将编译和依赖合在一起 非 C 文件的依赖生成 为了确保在必须的时候一定会编译（且仅在必须的时候才进行编译），所有的 make 程序都必须精确地知晓目标文件的依赖。
手动更新这个列表不仅繁琐，而且很容易出错。任何初具规模的系统，都倾向于提供自动提取信息的工具。可能最常用的工具就是 makedepend 程序，它能读取 c 源码并生成格式化的目标项依赖列表，可以插入或被包含进 makefile 文件中。
另一种流行的方案，是使用合适的编译器或预处理器（譬如 GCC）来生成依赖信息。
本文的主要目的不是要讨论如何生成依赖信息，虽然我会在最后一节中提及一些方法。 这里主要想介绍如何把这些工具的调用和输出整合进 GNU make 中，使依赖信息保持准确和实时，并尽可能做到无缝和高效。</description></item><item><title>程序员经典语录</title><link>http://disksing.com/programming-quotes/</link><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid>http://disksing.com/programming-quotes/</guid><description>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.
C. A. R. Hoare 我们应忽略掉无关紧要的效率提升，在 97% 的情况下：过早优化是万恶之源。
东尼·霍尔（图灵奖获得者，发明了快排、霍尔逻辑、CSP） Walking on water and developing software from a specification are easy if both are frozen.
Edward V Berard 在水面上行走和在需求上进行开发的共同点是，如果下面的东西不动的话就会容易得多。
Hofstadter’s Law: It always takes longer than you expect, even when you take into account Hofstadter’s Law.
Douglas Richard Hofstadter 霍夫斯塔特定律：事情花费的时间总是多于你的预期，即使你已经考虑霍夫斯塔特定律。
侯世达（《哥德尔、埃舍尔、巴赫&amp;ndash;集异璧之大成》作者，主要研究领域包括意识、类比、艺术创造、文学翻译以及数学和物理学探索） Some people, when confronted with a problem, think “I know, I’ll use regular expressions.</description></item><item><title>程序员笑话集锦</title><link>http://disksing.com/programmer-jokes/</link><pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate><guid>http://disksing.com/programmer-jokes/</guid><description>编程语言篇 “咚咚咚” “谁？” 过了很久…… “Java”
一百万只猴子，给他们一百万个键盘，其中的一个会写出 Java 程序，其它的写的都是 Perl 程序。
如果你拿 C++ 当锤子，所有的东西看起来都像是拇指。
为什么没有 Perl 代码混乱大赛？ 因为所有人都会赢。
换灯泡篇 换一个电灯泡需要几个程序员？ 一个也不要，这是硬件问题。
换一个电灯泡需要几个微软程序员？ 一个也不要，他们会把黑暗变成标准然后告诉每个人：“我们就是这么设计的。”
换一个电灯泡需要几个 C++ 程序员？ 你还在用面向过程的思维考虑问题。一个设计良好的电灯泡类必然封装了换灯泡的方法，所以你要做的就是调用“换电灯泡”方法。
人格魅力篇 计算机科学家靠什么避孕？ 他们的人格魅力。
一个计算机系学生坐在树下学习，又有一个计算机系学生骑着一辆很炫的自行车经过。前一个学生问道：“你的车从哪儿弄来的？” 骑车的回答说：“我在外面学习的时候，一个漂亮的 MM 骑着车过来，她脱光了所有的衣服对我说，‘你想要什么我都给你’。” “明智的选择！你穿她的衣服肯定不合适的。”前一个学生说道。
一个微软工程师正走在路上，突然听到一只青蛙说：“如果你吻我一下的话，我就会变成漂亮的女人，我们可以结婚，从此幸福地生活在一起。”工程师看着青蛙想了一下，抓起它轻轻地放在自己的上衣口袋里。青蛙把头伸出来说：“怎么，你不准备吻我吗？” “是的”，工程师说：“我在微软工作，没有时间娶妻——不过有一只会说话的青蛙还是挺酷的。”
两个程序员在聊天： “我昨天碰到个辣妹。我把她带回家，马上就开始如饥似渴地亲吻，她就坐在我的键盘上，然后……” “你在家里也有台电脑？CPU 是什么型号的？”
软件工程篇 十个顶尖软件工程师参加培训管理人员的课程。老师提出了这样一个问题： “假如你供职的公司是为航空电子设备提供软件的。有一天你乘飞机出差，当你上了飞机后你发现一个牌子上写着这个飞机用的是你的团队开发的 Beta 版软件，你会下飞机吗？” 九个软件工程师举了手。老师看着第十个问道：“你为什么愿意留在飞机上？” 这人回答说：“如果是我的团队写的这个软件，飞机根本无法起飞，根本谈不上坠毁。”
一男子在路边一根接着一根地抽烟。一个女士走过来对他说：“嘿，你不知道你是在慢性自杀吗？注意看看烟盒上的警告信息。” “没关系”，男子悠然自得地又吸了一口：“我是个程序员。” “嗯？这和你是程序员有什么关系？” “我们一点儿也不在乎警告（warning），我们只在乎错误（error）。”
编译成功了！交付吧。
这个笑话大概来自 70 年代的米国： 一个新手在试着修复一台坏了的 lisp 机器，他的方法就是反复关上电源然后打开。 专家看到之后，严厉地批评说：“你这样是没用的，你必须要明白出错的深层次原因。” 专家关掉电源，然后打开。 运行正常了。
操作系统篇 Unix 是用户友好的，只是要成为 Unix 的用户很困难。
为什么程序员喜爱 Unix: unzip, strip, touch, finger, grep, mount, fsck, more, yes, fsck, fsck, fsck, umount, sleep</description></item></channel></rss>