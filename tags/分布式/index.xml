<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式 on 硬盘在歌唱</title><link>http://disksing.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link><description>Recent content in 分布式 on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 16 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>理解一致性哈希</title><link>http://disksing.com/tip/consistent-hash/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/consistent-hash/</guid><description>这种hash方法跟使用mod的区别，就是能保证：
上线节点的时候，只需要把一些数据搬到新节点，其他节点之间没有数据迁移 下线/宕机的时候，只需要把这个节点上的数据搬出，其他节点之间没有数据迁移 但是，不加vnode的话，不能保证均匀，即：
不同节点承载的数据量可能差别巨大 上线一个节点的时候，所有数据都来自另外的同一个节点 下线/宕机的时候，所有数据都跑到另外的同一个节点上了 加上 vnode 之后：
不同节点承载数据量差不多 上线节点的时候，数据来自多个节点，且其他节点之间没有数据迁移 下线/宕机的时候，数据转移到多个节点，且其他节点之间没有数据迁移</description></item></channel></rss>