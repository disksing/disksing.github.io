<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>知识点 - 硬盘在歌唱 on 硬盘在歌唱</title><link>http://disksing.com/tip/</link><description>Recent content in 知识点 - 硬盘在歌唱 on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tip/index.xml" rel="self" type="application/rss+xml"/><item><title>watch alias 不能工作的问题</title><link>http://disksing.com/tip/watch-alias/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/watch-alias/</guid><description>watch 是一个常用的命令，不过它与 alias 不能很好地工作，比如：
$ watch ll sh: 1: ll: not found 其实只需要把 watch 也 alias 一下加个空格就行了： $ alias watch='watch ' $ watch ll</description></item><item><title>理解一致性哈希</title><link>http://disksing.com/tip/consistent-hash/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/consistent-hash/</guid><description>这种hash方法跟使用mod的区别，就是能保证：
上线节点的时候，只需要把一些数据搬到新节点，其他节点之间没有数据迁移 下线/宕机的时候，只需要把这个节点上的数据搬出，其他节点之间没有数据迁移 但是，不加vnode的话，不能保证均匀，即：
不同节点承载的数据量可能差别巨大 上线一个节点的时候，所有数据都来自另外的同一个节点 下线/宕机的时候，所有数据都跑到另外的同一个节点上了 加上 vnode 之后：
不同节点承载数据量差不多 上线节点的时候，数据来自多个节点，且其他节点之间没有数据迁移 下线/宕机的时候，数据转移到多个节点，且其他节点之间没有数据迁移</description></item><item><title>protobuf 改字段类型</title><link>http://disksing.com/tip/protobuf-field-type/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/protobuf-field-type/</guid><description>我们知道 protobuf 在序列化的时候，是使用 filed number 来标识不同字段的，因此在发布以后仍然可以修改字段名，同时保证兼容。
那么，字段的类型能不能修改呢？其实也是可以的，只要两种类型的 wire type 是相同的，那么就可以互相兼容，比如 int32, int64, uint32, bool, enum 互相都兼容。详见官方文档。
具体有啥用呢？
比如我们一开始有个字段只能取 true, false 两种值，很自然地，我们会用 bool。之后发现其实还有 unknown 这种情况，这时就不用再加一个字段，直接定义一个这样的 enum：
enum State { False = 0; True = 1; Unknown = 2; } 但是要注意的是，这时兼容是单向的，即新版本能兼容旧版本，但是旧版本不能兼容新版本。例如新版本写了个 Unknown 发给旧版，那肯定是读不出来的。</description></item><item><title>重新触发 GitHub 运行 CI</title><link>http://disksing.com/tip/github-ci-rerun/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/github-ci-rerun/</guid><description>有时候，CI 因为莫名其妙的原因卡住，导致 PR 被卡住不能合，提供几种解决思路：
点 detail 链接进入对应 CI（比如 travis）的详细界面，一般都有重新运行的按钮可以点 创建空提交并 push（使用 git commit &amp;ndash;allow-empty） 关闭 PR 再 reopen</description></item><item><title>etcd 的 cluster id</title><link>http://disksing.com/tip/etcd-cluster-id/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/etcd-cluster-id/</guid><description>找到生成 Cluster ID 的代码，其实不是某种随机法生成的，而是用所有 MemberID hash 出来的。
1func (c *RaftCluster) genID() { 2 mIDs := c.MemberIDs() 3 b := make([]byte, 8*len(mIDs)) 4 for i, id := range mIDs { 5 binary.BigEndian.PutUint64(b[8*i:], uint64(id)) 6 } 7 hash := sha1.Sum(b) 8 c.cid = types.ID(binary.BigEndian.Uint64(hash[:8])) 9} 那么 Member ID 又是怎么来的呢？
1var b []byte 2sort.Strings(m.PeerURLs) 3for _, p := range m.PeerURLs { 4 b = append(b, []byte(p)...) 5} 6 7b = append(b, []byte(clusterName)...) 8if now !</description></item><item><title>如何解压 gz 类型的文件</title><link>http://disksing.com/tip/gzip/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/gzip/</guid><description>一般在 Linux 平台，我们见到的压缩文件类型都是 .tar 或者 .tar.gz，解压方式分别是 tar -xf 和 tar -zxf，也就是当后缀多个 .gz 时要多加一个 -z 来解压。
还有一种不太常见的情况，就是文件没有 .tar 而是直接 foo.gz，这时需要使用 gzip 命令来解压 gzip -d foo.gz。</description></item><item><title>base64 中的换行符</title><link>http://disksing.com/tip/base64/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tip/base64/</guid><description>这是 wikipedia 在 Base64 词条给出的一个例子：
TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4= 比较有趣的是，其中的换行并不是 wrap 产生的，而是实实在在的换行符。在 RFC2045 (1996)中，规定了每行最多不能超过 76 字符，当消息过长时需要加入换行符。不过，RFC2045 的主要目的不是规范 Base64，而是针对 MIME 的。后来，在针对 Base64 的 RFC3548 和 RFC4648 中都明确规定了不要再插入换行符。
因为这个历史原因，很多工具，包括 linux 常用的 base64 命令行工具，都保留了 76 字符后换个行的行为。如果不想要换行符，可以通过 -w 0 参数来取消。
echo -n &amp;quot;apfjxkic-omyuobwd339805ak:60a06cd2ddfad610b9490d359d605407&amp;quot; | base64 -w 0 参考资料 stackoverflow</description></item></channel></rss>