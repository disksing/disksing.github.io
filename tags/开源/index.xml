<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开源 on 硬盘在歌唱</title><link>http://disksing.com/tags/%E5%BC%80%E6%BA%90/</link><description>Recent content in 开源 on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml"/><item><title>当我们签 CLA 或 DCO 的时候，我们在签什么</title><link>http://disksing.com/cla-and-dco/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/cla-and-dco/</guid><description>有些开源项目会要求 contributor 在提交 PR 的时候签署 CLA 或者 DCO，很多人（比如说我）按照提示进行一些操作也就签了，但是类似于安装软件的时候点“我已阅读并同意”，实际上并不知道自己签了啥。趁着放假加上新型肺炎的疫情遭遇封城，我研究了下这个问题。
要说清这两个概念，我们先要聊一下开源许可证。这个我们平时接触的很多了，只是有一点尤其值得注意，就是原理上软件开源开放的是使用权，而著作权（又称版权）并没有被放弃，开源许可证指明了用户在某些限制下使用软件及其源代码，如果用户违反了开源许可证，最终依然要回归到著作权的法律框架下解决争端。
著作权是怎么来的呢？是作品完成时自然产生的，归作品的作者所有。很显然，对于立足于开放协作的众多开源项目来说，著作权并不是单一的人或实体，而是所有的 contributor 都有一份。可以想象，如果发生开源软件被侵权，著作权的分散将对开源软件项目所有方带的维权带来一些麻烦。另外，假如项目所有者想要更换或调整开源许可证，会因为并不持有全部的著作权受到阻碍，还可能由于著作权的原因与 contributor 产生潜在的争议。
CLA 和 DCO 就是用来解决上面说的这些问题的。
先说 CLA，全称是 Contributor License Agreement，简单来说就是项目在接收 contributor 贡献的补丁之前，需要 contributor 签署的一份协议。与开源许可证不同，CLA 是没有标准化的，也就是说每个项目的 CLA 都可能有自己独特的条款。有些项目的 CLA 会要求 contributor 直接声明将著作权转移给项目方，也有些较为宽松，允许 contributor 持有著作权，但是需要授予项目方发布展示复制等权利（Apache 软件基金会的 CLA是一个例子）。
有批评者警告开发者永远不要签 CLA，特别是不要放弃自己劳动成果的著作权。一旦通过 CLA 将著作权转移给项目方，项目方就有权在未来更换其他更严格的许可证，甚至直接将项目变成完全闭源，显然这与开源世界自由开放的初衷是背道而驰的。
然后再说 DCO，全称 Developer Certificate Of Origin，最初是在 Linux kernel 项目中被引入的，它的条款很简单，其实就是为了“免责”的目的而存在的，也就是让补丁的提交者确认提交的内容是自己创作的，并且了解项目方会如何使用这个补丁。
与 CLA 相比，CLA 几个受到诟病的点在 DCO 这里是不存在的，作为自由软件的中坚力量，Linux 肯定搞不出转移著作权这种操作，而 Linux 使用的 GPL 许可证也限制了无法 relicense。DCO 的签署方式也有所差别，contributor 需要在每个 commit 添加一行 Signed-off-by: John Doe &amp;lt;john.</description></item></channel></rss>