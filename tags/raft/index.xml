<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>raft on 硬盘在歌唱</title><link>http://disksing.com/tags/raft/</link><description>Recent content in raft on 硬盘在歌唱</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 20 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://disksing.com/tags/raft/index.xml" rel="self" type="application/rss+xml"/><item><title>Paxos从入门到学会Raft</title><link>http://disksing.com/paxos/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/paxos/</guid><description>我觉得学习Paxos/Raft的最大障碍并不是算法本身复杂，而是难以理解。就好像某些数学结论，证明过程不难，但是结论却很难从直观上去理解。本</description></item><item><title>TiKV 的多副本机制</title><link>http://disksing.com/tikv-replica/</link><pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/tikv-replica/</guid><description>TiKV 使用了多副本的机制来保证一定程度的高可用（high availability）和数据安全（data safety)。值得注意的是，这里讲“一定</description></item><item><title>偶数节点 raft</title><link>http://disksing.com/even-node-raft/</link><pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate><guid>http://disksing.com/even-node-raft/</guid><description>对 raft 有所了解的同学都知道，raft 一般会使用奇数个节点，比如 3，5，7 等等。这是因为 raft 是 一种基于多节点投票选举机制的共识算法，通俗地说，只有</description></item></channel></rss>